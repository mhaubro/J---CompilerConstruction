// A grammar for j--, suitable for parsing by recursive descent
// Copyright 2013 Bill Campbell, Swami Iyer and Bahar Akbal-Delibas

compilationUnit ::= [PACKAGE qualifiedIdentifier SEMI]
                    {IMPORT  qualifiedIdentifier SEMI}
                    {typeDeclaration} EOF 

qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}

typeDeclaration ::= modifiers ( classDeclaration | interfaceDeclaration )

modifiers ::= {PUBLIC | PROTECTED | PRIVATE | CONST |
                STATIC | ABSTRACT | VOLATILE | STRICTFP |
                FINAL  | SYNCHRONIZED | TRANSIENT}

classDeclaration ::= CLASS IDENTIFIER
                       [EXTENDS qualifiedIdentifier] 
                       [IMPLEMENTS qualifiedIdentifier]
                       classBody

interfaceDeclaration ::= INTERFACE IDENTIFIER
                       [EXTENDS qualifiedIdentifier]
                       [IMPLEMENTS qualifiedIdentifier]
                       classBody


classBody ::= LCURLY {modifiers memberDecl} RCURLY

memberDecl ::= IDENTIFIER            // constructor
                 formalParameters block
             | (VOID | type) [NATIVE] IDENTIFIER  // method
                 formalParameters
                 [THROWS exceptions]
                 (block | SEMI)
             | type variableDeclarators SEMI // field
             | block // Static and instance initialization block

block ::= LCURLY {blockStatement} RCURLY 

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | IF parExpression statement [ELSE statement]
            | traditionalFor
            | rangeFor
            | WHILE parExpression (statement)
            | DO statement WHILE parExpression
            | CASE (expression | DEFAULT) COLON
            | RETURN [expression] SEMI
            | BREAK SEMI
            | CONTINUE SEMI
            | SWITCH ((CASE COLON statement) | (DEFAULT COLON statement))
            | THROW expression SEMI
            | tryClause
            | SEMI
            | statementExpression SEMI

traditionalForInit ::= 
    localVariableDeclarationStatement 
    | statementExpression { statementExpression }
    
traditionalFor ::= 
    FOR LPAREN // for(
    [ traditionalForInit ] SEMI // int i = 0;
    [ conditionalOrExpression ] SEMI // i < 5;
    [ statementExpression ] RPAREN // i++
    statement
    
rangeFor ::= 
    FOR LPAREN // for(
    variableIdentifier IDENTIFIER COLON // int a:
    variableIdentifier RPAREN // array)
    statement 
    
tryClause ::= TRY block catch [FINALLY block]
catch     ::= (CATCH LPAREN [modifiers] qualifiedIdentifier IDENTIFIER RPAREN block)+
exceptions ::= qualifiedIdentifier { qualifiedIdentifier }


formalParameters ::= LPAREN
                       [formalParameter {COMMA formalParameter}]
                     RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator {COMMA variableDeclarator}

variableDeclarator ::= IDENTIFIER [ASSIGN variableInitializer]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY 
                       [variableInitializer {COMMA variableInitializer}]
                     RCURLY 

arguments ::= LPAREN [expression {COMMA expression}] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | INT | BYTE | DOUBLE | FLOAT | LONG | SHORT

referenceType ::= basicType LBRACK RBRACK {LBRACK RBRACK}
                | qualifiedIdentifier {LBRACK RBRACK}

statementExpression ::= expression // but must have side-effect, eg i++

expression ::= assignmentExpression

assignmentOperator ::= (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN |
                        MULT_ASSIGN | DIV_ASSIGN | REM_ASSIGN |
                        ISHR_ASSIGN | IUSHR_ASSIGN | ISHL_ASSIGN |
                        XOR_ASSIGN | OR_ASSIGN | AND_ASSIGN)
                        
assignmentExpression ::= ternaryExpression  // must be a valid lhs
                           [assignmentOperator assignmentExpression]

ternaryExpression           ::= conditionalOrExpression // level 12
                                {TERNARY conditionalOrExpression COLON conditionalOrExpression}

conditionalOrExpression     ::= conditionalAndExpression // level 11
                                {LOR conditionalAndExpression}

conditionalAndExpression    ::= bitwiseOrExpression // level 10
                               {LAND bitwiseOrExpression}


bitwiseOrExpression  ::= bitwiseXorExpression   // level 9
                        {BITWISE_OR bitwiseXorExpression}

bitwiseXorExpression ::= bitwiseAndExpression   // level 8
                         {BITWISE_XOR bitwiseAndExpression}

bitwiseAndExpression ::= equalityExpression     // level 7
                         {BITWISE_AND equalityExpression}

equalityExpression ::= relationalExpression  // level 6
                         {EQUAL relationalExpression}

relationalExpression ::= shiftExpression       // level 5
                           [(GT | LE) shiftExpression
                           | INSTANCEOF referenceType]

shiftExpression     ::= additiveExpression      // level 4
                        [(LSHIFT | RSHIFT | LOGICRSHIFT)] additiveExpression

additiveExpression ::= multiplicativeExpression // level 3
                         {(PLUS | MINUS) multiplicativeExpression}

multiplicativeExpression ::= unaryExpression       // level 2
                               {(STAR | DIV | REM) unaryExpression}

unaryExpression ::= INC unaryExpression  // level 1
                  | (MINUS | COMPLEMENT | PLUS) unaryExpression // Prefix operator
                  | simpleUnaryExpression

simpleUnaryExpression ::= LNOT unaryExpression
                        | LPAREN basicType RPAREN unaryExpression //casted
                        | LPAREN // casted               
                            referenceType
                          RPAREN simpleUnaryExpression
                        | postfixExpression 

postfixExpression ::= primary {selector} {DEC | INC}

selector ::= DOT qualifiedIdentifier [arguments]
           | LBRACK expression RBRACK

primary ::= parExpression
          | THIS [arguments]
          | SUPER ( arguments 
                  | DOT IDENTIFIER [arguments] 
                  )
          | literal
          | NEW creator
          | qualifiedIdentifier [arguments]

creator ::= (basicType | qualifiedIdentifier) 
              ( arguments
              | LBRACK RBRACK {LBRACK RBRACK} [arrayInitializer]
              | newArrayDeclarator
              )

newArrayDeclarator ::= LBRACK expression RBRACK 
                         {LBRACK expression RBRACK} {LBRACK RBRACK}

literal ::= INT_LITERAL | CHAR_LITERAL | STRING_LITERAL | FLOAT_LITERAL
          | TRUE        | FALSE        | NULL
